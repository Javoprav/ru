# -*- coding: utf-8 -*-
"""7.1 Демонстрация

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/128a3tQNB3N_mtTplhas29u3TOaxSNC7d

## Эпизод 1 – Множества set

Set – это набор или еще его называют множество, и первое что нужно знать – в нем не может быть повторяющихся элемементов. 

Второе - он пишется в фигурных скобках
"""

my_languages = {"Python", "Java", "Go", "Python", "Go"}

print(len(my_languages))

print(my_languages)

"""Из за этой особенности его часто используют чтобы уникализировать списки"""

my_languages = ["Python", "Java", "Go", "Python", "Go"]

my_unique_languages = set(my_languages)

print(list(my_unique_languages))

"""Множества не упорядочены, поэтому индексов и слайсов у них нет."""

my_languages = {'Go', 'Java', 'Python'}
print(my_languages)
print(my_languages[1]) # Тут будет ошибка

"""А теперь плохие новости от компьютера. Передать несколько элементов в set не получится. А если передать строку – он разобьет её по буквам"""

surprise = set('Python')
print(surprise)

"""В остальном set похож на список – у него тоже есть методы. 

Не запоминайте их – не пригодится. Запишите на стикере и применяйте при необходимости.
"""

# add - добавляет элемент в множество. Не спрашивайте почему не append

my_languages = {'Go', 'Java', 'Python'}

my_languages.add('Swift') 
print(my_languages)
print(type(my_languages))

my_languages.add('Ruby') 
print(my_languages)

# pop - удаляет первый элемент из множества и возвращает его. Так как множества не упорядочены, нельзя точно сказать, какой элемент будет первым.

my_languages = {'Go', 'Java', 'Python'}
my_languages.pop()
language = my_languages.pop()
print(language)
print(my_languages)

# discard - удаляет элемент, если он находится в множестве.

my_languages = {'Go', 'Java', 'Python'}
my_languages.discard('Go')
my_languages.discard('Ruby')
print(my_languages)

# remove - тоже удаляет элемент из множества. KeyError, если такого элемента не существует.

my_languages = {'Go', 'Java', 'Python'}
my_languages.remove('Go')
print(my_languages)

"""Ну и конечно по набору можно запускать цикл:"""

my_languages = {'Go', 'Java', 'Python'}

for lang in my_languages:
  print(lang)

"""На самом деле множества используются для специфических задач пересечения. Вот смотрите:"""

# union - это сложение или объединение, например, мне нужно выучить к моим языкам еще и языки фронтенда

my_languages = {'Go', 'Java', 'Python', 'HTML', 'CSS'}
frontent = {'HTML', 'CSS', 'JavaScript'}

my_languages.union(frontent)

# intersection - это пересечение, например, какие из языков, которые я знаю – фронтендерские

my_languages = {'Go', 'Java', 'Python', 'HTML', 'CSS'}
frontent = {'HTML', 'CSS', 'JavaScript'}

my_languages.intersection(frontent)

# difference - это вычитание, например, какие из языков, которые я знаю КРОМЕ фронтендерских

my_languages = {'Go', 'Java', 'Python', 'HTML', 'CSS'}
frontent = {'HTML', 'CSS', 'JavaScript'}

my_languages.difference(frontent)

# issubset - возвращает булев тип, сообщает, содержится ли языки фронтенда полностью в мои языках, короче знаю ли я все языки фронтенда.

my_languages = {'Go', 'Java', 'Python', 'HTML', 'CSS'}
frontent = {'HTML', 'CSS'}

frontent.issubset(my_languages)

"""### Задача эпизода 1

У вас есть список навыков разработчика, Выписать:

- Каких фронтенд навыков ему не хватает?
- Какие бекенд навыки у него есть?
- Какие его навыки не относятся ни к фронтенду, ни к бекенду?
- Все ли нужные софтскиллы у него есть?
- Какие навыки надо иметь, чтобы быть фулстек (знать и фронт и бек)?
"""

my_skills = {"python", "flask", "django", "критическое мышление", "планирование", "переговоры", "html", "css"}
backend_skills = {"linux", "terminal", "python", "flask", "django", "restapi"}
frontend_skills = {"html", "css", "javascript"}
soft_skills = {"презентация", "планирование", "переговоры", "лидерство", "критическое мышление"}

frontend_i_lack = frontend_skills.difference(my_skills) # Каких фронтенд навыков ему не хватает?
backend_i_have = my_skills.intersection(backend_skills) # Какие бекенд навыки у него есть?
non_tech_skills = my_skills.difference(backend_skills).difference(frontend_skills) # не фронтенд и не бекенд
are_softskills_covered = soft_skills.issubset(my_skills) # Все ли софтскиллы у него есть?
fullstack = backend_skills.union(frontend_skills) # навыки для fullstack разработки

print(frontend_i_lack)
print(backend_i_have)
print(non_tech_skills)
print(are_softskills_covered)
print(fullstack)

"""## Эпизод 2 – Кортежи

Создать кортеж очень просто. Нужно взять список и поменять скобки
"""

colors = ("red", "green", "blue")
type(colors)

"""Или взять список и превратить его в кортеж"""

colors = tuple(["red", "green", "blue"])
type(colors)

"""Кортеж поддерживает методы и операторы списка, которые не приводят к его изменению (мутации)."""

colors = ("red", "green", "blue")

len(colors)

colors[0]; colors[-1]; colors[:2]

colors.index("green")

"""И перебор, конечно. 

"""

colors = ("red", "green", "blue")

for color in colors:
  print(color)

"""А вот любые методы добавления сразу вызовут ошибку:"""

colors = ("red", "green", "blue")

# del colors[0]
# colors[0] = None
# colors.remove("red")

"""Теперь о хорошем: у кортежей есть фича с возвращением значения из функции, например,"""

def daylight():

  sunrise = "6:30"
  sunset = "22:10"
  return sunrise, sunset


start, finish = daylight()
print(start)
print(finish)

# На самом деле, кортеж определяется не скобками, а запятыми

tupl123 = (1, 2, ) # Скобок нет, но это кортеж
print(tupl123, type(tupl123))

one = (1,)  # Скобки есть, но это не кортеж, а просто число 1
print (one, type(one))

tuple1 = (1,)  # А вот это кортеж, состоящий из одного элемента
print (tuple1, type(tuple1))

"""### Задачка эпизода 2

Напишите функцию, которая вернет из одной строки ФИО  так, чтобы можно было сразу использовать их в трех разных переменных.
"""

# Исходный код

def fullname_split(fullname_str):
  fullname_list = fullname_str.split(' ')

  surname = fullname_list[0]
  name = fullname_list[1]
  patronymic = fullname_list[2]

  return (surname, name, patronymic)

surname, name, patronymic = fullname_split("Гаврилов Юлиан Александрович")
print(name)

"""## Эпизод 3 – еще про списки

Мы уже познакомились со списками. 

Пора нырнуть в методы и узнать побольше про списки и практику их применения.

### Insert

```
list.insert(index, element)
```

добавляет элемент на нужную позицию. Можно догадаться, что  
```
a.insert(0, element)
```
добавит в начало списка, а 
```
a.insert(len(a), element) 
```
это то же самое что и 
```
a.append(element)
```

Например, у нас есть список-чеклист. Добавим туда пару пунктов в начало, середину и конец
"""

actions = ["Написать алгоритм", "Написать код", "Протестировать"]
actions.insert(0,"Посоветоваться с коллегами")
actions.insert(2,"Посоветоваться с коллегами")
actions.insert(len(actions),"Похвастаться коллегам")

print(actions)

"""### Remove

Кроме del есть родной метод удаления из списка и это remove.
```
list.remove(x)
```
Обратите внимание, если элемента нет – будет ошибка!
"""

actions = ["Написать алгоритм", "Написать код", "Протестировать"]
actions.remove("Протестировать")
print(actions)

"""### Append и Extend

Мы уже знакомы с методом append, но давайте напомним
"""

actions = ["Написать алгоритм", "Написать код", "Протестировать"]
actions.append("Похвастаться")

print(actions)

"""Но иногда нам нужно добавить несколько элементов и тут c append может быть не все гладко!"""

actions = ["Написать алгоритм", "Написать код", "Протестировать"]
actions.append(["Похвастаться", "Пойти отдохнуть"])
print(actions)

"""Теперь четвертый элемент это не строка – это список и это проблема! Для того, чтобы добавить один список в конец другого есть отдельный метод"""

actions = ["Написать алгоритм", "Написать код", "Протестировать"]
actions.extend(["Похвастаться", "Пойти отдохнуть"])
print(actions)

"""### Получение позиции index

Иногда нам нужно узнать, на каком месте находится элемент. Тогда мы просто ищем его с помощью index!
"""

actions = ["Написать алгоритм", "Написать код", "Протестировать"]
actions.index("Написать код")

"""### Сортировка списка

Сортировка списка – метод list.sort
"""

languages = ["python", "java", "javascript", "css", ] 
languages.sort()
print(languages)

"""В строке цифры сортируются по номеру в кодировке а не по здравому смыслу"""

lessons = ["2 урок", "1 урок", "3 урок", "12 урок", "10 урок", "13 урок"]
lessons.sort()
print(lessons)

lessons = ["02 урок",  "01 урок", "03 урок", "12 урок", "10 урок", "13 урок"]
lessons.sort()
print(lessons)

"""Регистр букв влияет на сортировку, будьте внимательны!"""

languages = ["python", "java", "javascript", "css", "Python", "Java", "Javascript", "Css",] 
languages.sort()
print(languages)

"""Параметр reverse позволяет сортировать список в обратном порядки (от большего к меньшему)"""

numbers = [1, 6, 3, 7, 4, 10, 5, 9, 2, 8] 
numbers.sort(reverse=False)
print(numbers)

"""### Задачка эпизода 3: "Ар-р-р-р"

Составте список, получите из него слова с буквой "Р" в один список, а слова без "Р" в другой, отсортируйте каждый список по алфавиту и выведите результат
"""

words = ["разработчики","сервисов","ориентируются","на","скорость","ответа","и","производительность","при","проектировании", "архитектуры"]
r_words = []
r_free_words = []

for word in words:
  if "р" in word:
    r_words.append(word)
  else:
    r_free_words.append(word)

r_words.sort(reverse=True)
r_free_words.sort()

for word in r_words:
  print(word)

print('---')

for word in r_free_words:
  print(word)

"""## Эпизод 4 – списки словарей

Мы знаем, что словарь можно положить в список. Например, список продуктов в магазине.
"""

# {"name":"Яблоки", "price":"100", "available": 40}

store = [
    {"name":"Яблоки", "price":"100", "available": 40},
    {"name":"Апельсины", "price":"200", "available": 20},
    {"name":"Гранаты", "price":"400", "available": 5},
]

"""Но как потом с ними работать? Можно использовать две пары квадратных скобок, вот так:"""

store = [
    {"name":"Яблоки", "price":"100", "available": 40},
    {"name":"Апельсины", "price":"200", "available": 20},
    {"name":"Гранаты", "price":"400", "available": 5},
]

print(store[0]["name"], store[0]["price"])
print(store[1]["name"], store[1]["price"])
print(store[2]["name"], store[2]["price"])

"""С помощью двойных скобок можно управлять и содержимым словарей"""

store = [
    {"name":"Яблоки", "price":"100", "available": 40},
    {"name":"Апельсины", "price":"200", "available": 20},
    {"name":"Гранаты", "price":"400", "available": 5},
]

store[0]['price'] = 150
store[1]['price'] = 250
store[2]['price'] = 450

print(store[0])
print(store[1])
print(store[2])

"""И, конечно, если у нас есть список, мы можем запустить по нему цикл"""

store = [
    {"name":"Яблоки", "price":"100", "available": 40},
    {"name":"Апельсины", "price":"200", "available": 20},
    {"name":"Гранаты", "price":"400", "available": 5},
]

for fruit in store:
  if fruit['available'] >= 6:
    print(fruit['name'], fruit['price'])

"""### Задание эпизода 4

Тотальная распродажа. Снизьте цены на все фрукты в 2 раза
"""

store = [
    {"name":"Яблоки", "price":"100", "available": 40},
    {"name":"Апельсины", "price":"200", "available": 20},
    {"name":"Гранаты", "price":"400", "available": 5},
]

for fruit in store:
  price = int(fruit["price"])
  new_price = price // 2
  fruit["price"] = str(new_price)


for fruit in store:
  print(fruit['name'], fruit['price'])

"""## Селфчек"""

# Как добавить элемент в начало списка?

my_languages = ["Python", "Java", "Go", "Python", "Go"]

my_languages.insert(0, "Swift")

print(my_languages)

# Как добавить элемент в конец списка?

my_languages = ["Python", "Java", "Go", "Python", "Go"]

my_languages.append("Swift")

print(my_languages)

# Как удалить элемент из списка?

my_languages = ["Python", "Pava", "Javascript", "Python", "Go"]

my_languages.remove("Java")
del my_languages[1]

print(my_languages)

# Как добавить несколько элементов в список?

my_languages = ["Python", "Java", "Go", "Python", "Go"]

my_languages.extend(["C++", "C#"])

print(my_languages)

# Как отсортировать список?

my_languages = ["Python", "Java", "Go", "Python", "Go"]

my_languages.sort(reverse=True)

print(my_languages)

# Как проверить наличие и отсутствие элемента в списке?

my_languages = ["Python", "Java", "Go", "Python", "Go"]

print("Go" in my_languages)

"""   ---"""

# Как создать множество?

my_languages = {"Python", "Java", "Go", "Python", "Go" }

# Как уникализировать список с помощью множества?

list(set(["Python", "Java", "Go", "Python", "Go"]))

# Как упорядочены элементы в множестве?

# Никак, и после любых изменений порядок может поменяться

# Как добавить элемент в множество?

my_languages = {"Python", "Java", "Go", "Python", "Go" }
my_languages.add("Go")
print(my_languages)

# Как удалить элемент из множества

my_languages = {"Python", "Java", "Go", "Python", "Go" }

my_languages.remove("Go") # Если элемента нет, будет ошибка
my_languages.discard("Python")

print(my_languages)

# Как объединить два множества

my_languages = [{"Python", "Java"}, {"Go", "C"}]
all_languages = my_languages[0].union(my_languages[1])

print(all_languages)

# Как пересечь два множества

green = {"apple", "qiwi", "leaf", "grass", "parrot"}
fruits = {"apple", "orange", "banana", "qiwi"}

print(fruits.intersection(green))

# Как проверить, входит ли подможество в множество

green = {"apple","qiwi","leaf","grass","parrot"}
fruits = {"apple", "qiwi"}

print(fruits.issubset(green))

"""---"""

# Как создать список словарей?

fruits = [
  {"title": "яблоко", "color": "green", "healthy": True},
  {"title": "апельсин", "color": "orange", "healthy": True},
  {"title": "банана", "color": "yellow", "healthy": True},
]

# Как получить  элементы списка, если они – словари? 

fruits = [
  {"title": "яблоко", "color": "green", "healthy": True},
  {"title": "апельсин", "color": "orange", "healthy": True},
  {"title": "банана", "color": "yellow", "healthy": True},
]

print(f" {fruits[0]['title']} – это здоровый продукт? {fruits[0]['healthy']}" )

# Как изменить элементы списка, если они – словари? 

fruits[2]['title'] = "банан"

print(fruits[2])

# Как перебрать в цикле элементы списка, если они – словари?

fruits = [
  {"title": "яблоко", "color": "green", "healthy": True},
  {"title": "апельсин", "color": "orange", "healthy": True},
  {"title": "банан", "color": "yellow", "healthy": True},
]

for fruit in fruits:
  print(fruit["title"])